// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/30/2022 15:49:43"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    sumador_restador_completo
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module sumador_restador_completo_vlg_sample_tst(
	A1,
	A2,
	A3,
	A4,
	B1,
	B2,
	B3,
	B4,
	CLOCK,
	SUMAR/RESTAR,
	sampler_tx
);
input  A1;
input  A2;
input  A3;
input  A4;
input  B1;
input  B2;
input  B3;
input  B4;
input  CLOCK;
input  SUMAR/RESTAR;
output sampler_tx;

reg sample;
time current_time;
always @(A1 or A2 or A3 or A4 or B1 or B2 or B3 or B4 or CLOCK or SUMAR/RESTAR)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module sumador_restador_completo_vlg_check_tst (
	BANDERA_DE_C,
	BANDERA_S,
	BANDERA_V,
	BANDERA_Z,
	S1,
	S2,
	S3,
	S4,
	sampler_rx
);
input  BANDERA_DE_C;
input  BANDERA_S;
input  BANDERA_V;
input  BANDERA_Z;
input  S1;
input  S2;
input  S3;
input  S4;
input sampler_rx;

reg  BANDERA_DE_C_expected;
reg  BANDERA_S_expected;
reg  BANDERA_V_expected;
reg  BANDERA_Z_expected;
reg  S1_expected;
reg  S2_expected;
reg  S3_expected;
reg  S4_expected;

reg  BANDERA_DE_C_prev;
reg  BANDERA_S_prev;
reg  BANDERA_V_prev;
reg  BANDERA_Z_prev;
reg  S1_prev;
reg  S2_prev;
reg  S3_prev;
reg  S4_prev;

reg  BANDERA_DE_C_expected_prev;
reg  BANDERA_S_expected_prev;
reg  BANDERA_V_expected_prev;
reg  BANDERA_Z_expected_prev;
reg  S1_expected_prev;
reg  S2_expected_prev;
reg  S3_expected_prev;
reg  S4_expected_prev;

reg  last_BANDERA_DE_C_exp;
reg  last_BANDERA_S_exp;
reg  last_BANDERA_V_exp;
reg  last_BANDERA_Z_exp;
reg  last_S1_exp;
reg  last_S2_exp;
reg  last_S3_exp;
reg  last_S4_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	BANDERA_DE_C_prev = BANDERA_DE_C;
	BANDERA_S_prev = BANDERA_S;
	BANDERA_V_prev = BANDERA_V;
	BANDERA_Z_prev = BANDERA_Z;
	S1_prev = S1;
	S2_prev = S2;
	S3_prev = S3;
	S4_prev = S4;
end

// update expected /o prevs

always @(trigger)
begin
	BANDERA_DE_C_expected_prev = BANDERA_DE_C_expected;
	BANDERA_S_expected_prev = BANDERA_S_expected;
	BANDERA_V_expected_prev = BANDERA_V_expected;
	BANDERA_Z_expected_prev = BANDERA_Z_expected;
	S1_expected_prev = S1_expected;
	S2_expected_prev = S2_expected;
	S3_expected_prev = S3_expected;
	S4_expected_prev = S4_expected;
end



// expected BANDERA_DE_C
initial
begin
	BANDERA_DE_C_expected = 1'bX;
end 

// expected BANDERA_S
initial
begin
	BANDERA_S_expected = 1'bX;
end 

// expected BANDERA_V
initial
begin
	BANDERA_V_expected = 1'bX;
end 

// expected BANDERA_Z
initial
begin
	BANDERA_Z_expected = 1'bX;
end 

// expected S1
initial
begin
	S1_expected = 1'bX;
end 

// expected S2
initial
begin
	S2_expected = 1'bX;
end 

// expected S3
initial
begin
	S3_expected = 1'bX;
end 

// expected S4
initial
begin
	S4_expected = 1'bX;
end 
// generate trigger
always @(BANDERA_DE_C_expected or BANDERA_DE_C or BANDERA_S_expected or BANDERA_S or BANDERA_V_expected or BANDERA_V or BANDERA_Z_expected or BANDERA_Z or S1_expected or S1 or S2_expected or S2 or S3_expected or S3 or S4_expected or S4)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected BANDERA_DE_C = %b | expected BANDERA_S = %b | expected BANDERA_V = %b | expected BANDERA_Z = %b | expected S1 = %b | expected S2 = %b | expected S3 = %b | expected S4 = %b | ",BANDERA_DE_C_expected_prev,BANDERA_S_expected_prev,BANDERA_V_expected_prev,BANDERA_Z_expected_prev,S1_expected_prev,S2_expected_prev,S3_expected_prev,S4_expected_prev);
	$display("| real BANDERA_DE_C = %b | real BANDERA_S = %b | real BANDERA_V = %b | real BANDERA_Z = %b | real S1 = %b | real S2 = %b | real S3 = %b | real S4 = %b | ",BANDERA_DE_C_prev,BANDERA_S_prev,BANDERA_V_prev,BANDERA_Z_prev,S1_prev,S2_prev,S3_prev,S4_prev);
`endif
	if (
		( BANDERA_DE_C_expected_prev !== 1'bx ) && ( BANDERA_DE_C_prev !== BANDERA_DE_C_expected_prev )
		&& ((BANDERA_DE_C_expected_prev !== last_BANDERA_DE_C_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BANDERA_DE_C :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BANDERA_DE_C_expected_prev);
		$display ("     Real value = %b", BANDERA_DE_C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BANDERA_DE_C_exp = BANDERA_DE_C_expected_prev;
	end
	if (
		( BANDERA_S_expected_prev !== 1'bx ) && ( BANDERA_S_prev !== BANDERA_S_expected_prev )
		&& ((BANDERA_S_expected_prev !== last_BANDERA_S_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BANDERA_S :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BANDERA_S_expected_prev);
		$display ("     Real value = %b", BANDERA_S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BANDERA_S_exp = BANDERA_S_expected_prev;
	end
	if (
		( BANDERA_V_expected_prev !== 1'bx ) && ( BANDERA_V_prev !== BANDERA_V_expected_prev )
		&& ((BANDERA_V_expected_prev !== last_BANDERA_V_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BANDERA_V :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BANDERA_V_expected_prev);
		$display ("     Real value = %b", BANDERA_V_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BANDERA_V_exp = BANDERA_V_expected_prev;
	end
	if (
		( BANDERA_Z_expected_prev !== 1'bx ) && ( BANDERA_Z_prev !== BANDERA_Z_expected_prev )
		&& ((BANDERA_Z_expected_prev !== last_BANDERA_Z_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BANDERA_Z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BANDERA_Z_expected_prev);
		$display ("     Real value = %b", BANDERA_Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BANDERA_Z_exp = BANDERA_Z_expected_prev;
	end
	if (
		( S1_expected_prev !== 1'bx ) && ( S1_prev !== S1_expected_prev )
		&& ((S1_expected_prev !== last_S1_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_S1_exp = S1_expected_prev;
	end
	if (
		( S2_expected_prev !== 1'bx ) && ( S2_prev !== S2_expected_prev )
		&& ((S2_expected_prev !== last_S2_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_S2_exp = S2_expected_prev;
	end
	if (
		( S3_expected_prev !== 1'bx ) && ( S3_prev !== S3_expected_prev )
		&& ((S3_expected_prev !== last_S3_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S3_expected_prev);
		$display ("     Real value = %b", S3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_S3_exp = S3_expected_prev;
	end
	if (
		( S4_expected_prev !== 1'bx ) && ( S4_prev !== S4_expected_prev )
		&& ((S4_expected_prev !== last_S4_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S4_expected_prev);
		$display ("     Real value = %b", S4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_S4_exp = S4_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module sumador_restador_completo_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A1;
reg A2;
reg A3;
reg A4;
reg B1;
reg B2;
reg B3;
reg B4;
reg CLOCK;
reg SUMAR/RESTAR;
// wires                                               
wire BANDERA_DE_C;
wire BANDERA_S;
wire BANDERA_V;
wire BANDERA_Z;
wire S1;
wire S2;
wire S3;
wire S4;

wire sampler;                             

// assign statements (if any)                          
sumador_restador_completo i1 (
// port map - connection between master ports and signals/registers   
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.A4(A4),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.B4(B4),
	.BANDERA_DE_C(BANDERA_DE_C),
	.BANDERA_S(BANDERA_S),
	.BANDERA_V(BANDERA_V),
	.BANDERA_Z(BANDERA_Z),
	.CLOCK(CLOCK),
	.S1(S1),
	.S2(S2),
	.S3(S3),
	.S4(S4),
	.\SUMAR/RESTAR (SUMAR/RESTAR)
);

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #50000 1'b1;
	#50000;
end 

// SUMAR/RESTAR
initial
begin
	SUMAR/RESTAR = 1'b0;
	SUMAR/RESTAR = #20000 1'b1;
	SUMAR/RESTAR = #60000 1'b0;
	SUMAR/RESTAR = #160000 1'b1;
	SUMAR/RESTAR = #260000 1'b0;
	SUMAR/RESTAR = #230000 1'b1;
	SUMAR/RESTAR = #180000 1'b0;
end 

// A1
initial
begin
	A1 = 1'b0;
	A1 = #730000 1'b1;
	A1 = #180000 1'b0;
end 

// A2
initial
begin
	A2 = 1'b0;
	A2 = #90000 1'b1;
	A2 = #40000 1'b0;
	A2 = #570000 1'b1;
	A2 = #60000 1'b0;
end 

// A3
initial
begin
	A3 = 1'b0;
	A3 = #380000 1'b1;
	A3 = #80000 1'b0;
end 

// A4
initial
begin
	A4 = 1'b0;
	A4 = #160000 1'b1;
	A4 = #80000 1'b0;
	A4 = #240000 1'b1;
	A4 = #120000 1'b0;
end 

// B1
initial
begin
	B1 = 1'b0;
	B1 = #160000 1'b1;
	B1 = #80000 1'b0;
	B1 = #240000 1'b1;
	B1 = #120000 1'b0;
end 

// B2
initial
begin
	B2 = 1'b0;
	B2 = #630000 1'b1;
	B2 = #70000 1'b0;
	B2 = #130000 1'b1;
	B2 = #50000 1'b0;
end 

// B3
initial
begin
	B3 = 1'b0;
	B3 = #120000 1'b1;
	B3 = #80000 1'b0;
	B3 = #140000 1'b1;
	B3 = #60000 1'b0;
	B3 = #170000 1'b1;
	B3 = #90000 1'b0;
	B3 = #210000 1'b1;
	B3 = #70000 1'b0;
end 

// B4
initial
begin
	B4 = 1'b0;
	B4 = #220000 1'b1;
	B4 = #80000 1'b0;
	B4 = #240000 1'b1;
	B4 = #60000 1'b0;
end 

sumador_restador_completo_vlg_sample_tst tb_sample (
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.A4(A4),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.B4(B4),
	.CLOCK(CLOCK),
	.SUMAR/RESTAR(SUMAR/RESTAR),
	.sampler_tx(sampler)
);

sumador_restador_completo_vlg_check_tst tb_out(
	.BANDERA_DE_C(BANDERA_DE_C),
	.BANDERA_S(BANDERA_S),
	.BANDERA_V(BANDERA_V),
	.BANDERA_Z(BANDERA_Z),
	.S1(S1),
	.S2(S2),
	.S3(S3),
	.S4(S4),
	.sampler_rx(sampler)
);
endmodule

